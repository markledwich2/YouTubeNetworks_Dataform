config {
  type: "table",
  dependencies: ['video_latest', 'caption'],
  description: `Mentions of terms of interest to comcast`
}

js {
  const terms = [
    ['comcast', /(?<![\w]|(\w\.))comcast(?![\w]|(\.\w))/i],  
    '5G',
    'Net Neutrality'  
  ]

  const comcastTerms =  [
      ['Brian Roberts', /\b((brian|ryan|bryan)\s(l.?\s)?robert(s|'s)?|robert(s|'s)? family)\b/i],
      ['Comcast Exec', /\b(ceo|executive|cfo|leadership|roberts|robert|clo|cavanagh|reid|armstrong|cohen)\b/i]
    ]

  const additionalKeywords = ['verison', /(?<![\w]|(\w\.))comcast(?![\w]|(\.\w))/i]

  const parts = ['title', 'caption']
  const debugVideos = null //['AGZhU6oQUo', 'zqyfCRkayRs', 'VyEf4EBXe8o', 'mipSPvvz05A', 'I9_H4ZnHuoI', '9aWT6lznOhI', '7uQuHU6DHB8']
  const debugVideoSql = debugVideos ? `video_id in (${debugVideos.map(v => `'${v}'`).join(',')})` : ''
}

  with comcast_connectivity as (
          select  $2::string video_id, $3::int offset_seconds
    from @public.yt_data/import/narratives/comcast_all_mentions.zsl_connectivity_pred_v2.pos_pred.tsv.gz (file_format => tsv_header)
    )
   , vids as (
    select video_id from video_latest
    where upload_date > '2019-01-01'
    ${debugVideoSql && `and ${debugVideoSql}`}
  )
  , mention_vids as ( ${mentions.mentionsSelect(terms, 'vids', parts)}  )
  , comcast_vids as ( select distinct video_id from mention_vids where array_contains('comcast'::variant, matches))
  , sub_mentions as ( ${mentions.mentionsSelect(comcastTerms, 'comcast_vids', parts)} )
  , all_mentions as ( select * from mention_vids union all select * from sub_mentions )
  , narrative_mentions as (
      select n.value::string narrative
      , s.video_id
      , array_append(s.matches, iff(exists(select * from comcast_connectivity c where c.video_id = s.video_id), 'connectivity', 'non-connectivity')) matches
      , context, part, offset_seconds
    from all_mentions s
    , lateral flatten(input => s.matches) n -- context term matches are narratives, and suppliment matches are mention keywords)
  )
, import_vids as (
    with m2 as (
        select 'Jews Control Media' narrative, $2::string video_id, $3::int offset_seconds, $10::string caption
        from @public.yt_data/import/narratives/jewish_media_all_mentions.zsl_antisem_pred_v1.pos_pred.tsv.gz (file_format => tsv_header)
    )
  select narrative, video_id, null matches, caption context, 'caption' part, offset_seconds
  from m2
)
, u as (
  select * from narrative_mentions union all select * from import_vids
)
select * from u
