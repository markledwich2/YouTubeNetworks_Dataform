config {
  type: "table",
  tags:['init', 'narrative'],
  dependencies:['video_narrative_raw', 'mention_vaccine_personal', 'mention_domestic', 'mention_comcast'],
  description:'Metion data intended for viz at the video granularity. `contexts` column can have different schema as need for different narratives'
}

js {
  const union = (tables) => tables.map(t => `select * from ${t}`).join('\nunion all ')
}

with m_election_fraud as (
  with q0 as (
    select *
         , split_part(note,'_',1)='heur' heuristic
         , count_if(not heuristic) over (partition by video_id, label_raw) manual_label_count

    from video_narrative_raw
  )
    , q1 as (
    select *
         , first_value(label_raw) over (partition by video_id order by manual_label_count desc) label
         , first_value(note) over (partition by video_id order by manual_label_count desc) note
    from q0
  )
  select  '2020 Election Fraud' narrative
        , video_id
       , array_construct(keywords) keywords
       , captions:offset_seconds::int offset_seconds
       , captions:caption::string caption
       , 'caption' part
       , array_construct(label_raw) tags
       , array_construct(label) video_tags
       , array_construct(iff(manual_label_count >0, 'manual', 'auto')) video_tags_meta
       , object_construct('heuristic',heuristic) extra
  from q1
  --where video_id='g_RrYz85E1A'
)
  , m_vaccine_personal as (
    with mentions_json as (
      select $1:meta m, $1 v, metadata$filename file
      from @public.yt_data/import/narratives/covid_vaccine_personal_mentions
    )
    , raw as (
          select m:CAPTION_GROUP::int caption_group
          , m:"CHANNEL_ID"::string channel_id
          , m:"VIDEO_ID"::string video_id
          , m:"OFFSET_SECONDS"::double  offset_seconds
          , v:"text"::string caption
          , file
        from mentions_json
    )
    select 'Vaccine Personal' narrative, video_id, null keywords, offset_seconds, caption, 'caption' part, null tags, null video_tags, null video_tags_meta, null extra
    from raw
    --where video_id = 'NJpB-FlSDEA'
    qualify row_number() over (partition by video_id, offset_seconds order by length(caption) desc) = 1 -- remove what looks like duplicates
  )
   , m_vaccine_dna as (
     with mentions_json as (
        select $1 v, metadata$filename file
        from @public.yt_data/import/narratives/covid_vaccine_dna_mod.final_pos_preds.jsonl.gz
      )
     , raw as (
             select v:CHANNEL_ID::string channel_id, v:VIDEO_ID::string video_id, v:OFFSET_SECONDS::double  offset_seconds, v:CAPTION::string caption, v:CAPTION_SHORT caption_short
      from mentions_json
     )
      select 'Vaccine DNA' narrative,  video_id, null keywords, offset_seconds, caption_short caption, 'caption' part, null tags, null video_tags, null video_tags_meta, null extra
     from raw
    )
    , m_qanon as (
  select 'QAnon' narrative
       , v.video_id
       , m.matches keywords
       , m.offset_seconds
       , m.context caption
       , m.part
       , m.matches tags
       , null video_tags
       , null video_tags_meta
       , null extra
  from video_latest v
         join channel_latest c on c.channel_id=v.channel_id
        left join mention_domestic m on m.video_id = v.video_id
  where array_contains('QAnon'::variant,tags)
    and upload_date>='2019-01-01'
    )
    ,  m_comcast as (
        select narrative
       , video_id
       , matches keywords
       , offset_seconds
       , context caption
       , part
       , matches tags
       , null video_tags
       , null video_tags_meta
       , null extra
      from mention_comcast
    )
        ,  m_maccas as (
        select narrative
       , video_id
       , matches keywords
       , offset_seconds
       , context caption
       , part
       , null tags
       , null video_tags
       , null video_tags_meta
       , null extra
      from mention_maccas
    )
    , m_qmilitary as (
        select 'QAnon - Military in Control' narrative
       , video_id
       , null keywords
       , offset_seconds
       , caption
       , 'caption' part
       , null tags
       , null video_tags
       , null video_tags_meta
       , null extra
      from mention_qmilitary
    )
  , u as (
    ${union(['m_election_fraud', 'm_vaccine_personal', 'm_vaccine_dna', 'm_qanon', 'm_comcast', 'm_maccas', 'm_qmilitary'])}
)
, s as (
  select narrative
     , video_id
     , keywordsToMentions(array_agg(keywords)) mentions
     , arrayExclude(arrayUniq(arrayFlatten(array_agg(keywords))), array_construct('', null)) keywords
     , arrayExclude(arrayUniq(arrayFlatten(array_agg(video_tags))), array_construct('', null)) tags
     , arrayExclude(arrayUniq(arrayFlatten(array_agg(video_tags_meta))), array_construct('', null)) tags_meta
     , array_agg(mergeObject(object_construct('part',part,'offset_seconds',offset_seconds,'caption',caption, 'tags', tags),extra)) captions
from u
group by 1, 2
)
select * from s
