config {
  type: "table",
  tags:['init', 'narrative'],
  dependencies:['video_narrative_raw'],
  description:'Metion data intended for viz at the video granularity. `contexts` column can have different schema as need for different narratives'
}

js {
  const union = (selects) => selects.join('\nunion all ')
  const selectTable = (t) => `select * from ${t}`
  const selectMention = (table) => `
        select narrative
       , video_id
       , matches keywords
       , offset_seconds
       , context caption
       , part
       , matches tags
       , null video_tags
       , null video_tags_meta
       , null extra
      from ${table}`
}

with m_election_fraud as (
  with q0 as (
    select *
         , split_part(note,'_',1)='heur' heuristic
         , count_if(not heuristic) over (partition by video_id, label_raw) manual_label_count

    from video_narrative_raw
  )
    , q1 as (
    select *
         , first_value(label_raw) over (partition by video_id order by manual_label_count desc) label
         , first_value(note) over (partition by video_id order by manual_label_count desc) note
    from q0
  )
  select  '2020 Election Fraud' narrative
        , video_id
       , array_construct(keywords) keywords
       , captions:offset_seconds::int offset_seconds
       , captions:caption::string caption
       , 'caption' part
       , array_construct(label_raw) tags
       , array_construct(label) video_tags
       , array_construct(iff(manual_label_count >0, 'manual', 'auto')) video_tags_meta
       , object_construct('heuristic',heuristic) extra
  from q1
  --where video_id='g_RrYz85E1A'
)
  , u as (
    ${union([
      selectTable('m_election_fraud')
    ])}
)
, s as (
  select narrative
     , video_id
     , keywordsToMentions(array_agg(keywords)) mentions
     , arrayExclude(arrayUniq(arrayFlatten(array_agg(keywords))), array_construct('', null)) keywords
     , arrayExclude(arrayUniq(arrayFlatten(array_agg(video_tags))), array_construct('', null)) tags
     , arrayExclude(arrayUniq(arrayFlatten(array_agg(video_tags_meta))), array_construct('', null)) tags_meta
     , array_agg(mergeObject(object_construct('part',part,'offset_seconds',offset_seconds,'caption',caption, 'tags', tags),extra)) captions
from u
group by 1, 2
)
select * from s
