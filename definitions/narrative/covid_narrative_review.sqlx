config {
  type: "table",
  dependencies: ['reddit_video_collect', 'video_latest', 'caption'],
  description: `Mentions from videos with covid related words in title/description/caption`
}

js {
  function hasCovidWords(col) {
    return `array_size(regexmatchall(${col}, $$\\b(covid|coronavirus|SARS-CoV-2|vaccine|Wuhan flu|China virus|vaccinated|Pfizer|Moderna|BioNTech|AstraZeneca|Johnson \& Johnson|CDC|world health organization|Herd immunity)\\b$$, 'i')) > 0`
  }
}


-- covid videos
with post_link as (
  select video_id, froms
  from covid_discover
  where video_id is not null
)
  , vids as (
  select *
  from video_latest
  where views>1000
)
  , covid_captions as (
  select c.video_id, array_agg(object_construct('offset',offset_seconds,'caption',caption)) captions
  from (
    select c.*
    from caption c
           left join vids vl on c.updated=vl.updated
    where ${hasCovidWords('c.caption')}
      qualify row_number() over (partition by c.video_id order by offset_seconds::int)<=10
  ) c
  group by c.video_id
)
  , covid_video as (
  select v.video_id
  from vids v
  where ${hasCovidWords('video_title')}
    or ${hasCovidWords('description')}
)
  , u as (
  select *, null captions
  from covid_video v
  where not exists(select * from covid_captions c where c.video_id=v.video_id)
  union all
  select *
  from covid_captions
)
select u.video_id
     , v.video_title
     , v.channel_id
     , coalesce(c.channel_title,v.channel_title) channel_title
     , v.views
     , v.description
     , u.captions
     , v.platform
     , p.froms source
     , v.upload_date
     , v.updated
from u
       join vids v on u.video_id=v.video_id
       left join channel_latest c on v.channel_id=c.channel_id
       left join post_link p on p.video_id=v.video_id
