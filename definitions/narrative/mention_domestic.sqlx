config {
  type: "table",
  dependencies: ['video_latest', 'caption'],
  description: `Mentions of popular q terms to classify into sub-narratives`
}

js {
  const dfr_terms = ['wwg1wga','the storm','great awakening','trust the plan','dark to light','future proves past',
    'disinformation is necessary','the military is the only way','we are the news',
    'save the children','pizzagate', 'pizza gate', 'Seth Rich',`there's q and there's anons`]

  // terms is an array of string terms. Or a tuple that returns a tuple in the form: [<name to use as the match>, a function returning a boolean extpression given the name of a column]
  const terms_extra = ['great reset', 'jfk', 'arizona recount', 'quo warranto', 'maricopa', 'qanon', 'q drop', 'Seth Rich', 
     'deep state', 'stop the steal', 'plandemic', 'cabal', 'puppet', 'soul family',
     'patriots?', 'prayer warriors', 'we the people', 'satanic ritual abuse', 'podesta', 'adrenochrome', 'pedophile ring', 
     'spirit cooking', 'child sex trafficking', 'mass arrests', ['trump reinstatement', c => `${c} like all ('%trump%', '%reinstate%') or ${c} like all ('%trump%', '%august%')`]]
}

with vids as (
  select video_id from video_latest
  where upload_date > '2020-01-01'
)
, mentions as (
  ${mentions.mentionsSelect(dfr_terms.concat(terms_extra), 'vids')}
)
select video_id, context, part, offset_seconds
  , arrayReplace(matches, 'patriots', '', 'patriot') matches
  , array_intersection(matches,${mentions.arraySql(dfr_terms.map(t => t.replace(/ /g, '')))}) matches_dfr
  
 from mentions

