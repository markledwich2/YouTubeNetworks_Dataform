config {
  type: 'table',
  description: 'A list of videos mentioning covid words. Used for reports on covid to refresh channels/videos that arent in the political dataset' 
}

  with covid_caption_vids as (
    select c.video_id
         , array_agg(object_construct('offset',offset_seconds,'caption',caption)) captions
         , arrayuniq(arrayflatten(array_agg(words))) words
    from (
      select c.*, covidwords(caption) words
      from caption c
             join video_latest vl on vl.video_id=c.video_id
      where array_size(words)>0
       -- and channel_id in ('UCupvZG-5ko_eiXAupbDfxWw')
      --qualify row_number() over (partition by c.video_id order by offset_seconds::int)<=10
    ) c
    group by c.video_id
  )
    , covid_title_vids as (
    select video_id, arrayuniq(array_cat(covidwords(video_title),covidwords(description))) words
    from video_latest
    where array_size(words)>0
     -- and channel_id in ('UCupvZG-5ko_eiXAupbDfxWw')
  )

    , u as (
    with u0 as (
      select video_id, words, 'caption' part
      from covid_caption_vids
      union all
      select video_id, words, 'title' part
      from covid_title_vids
    )
    select video_id
         , arrayuniq(arrayflatten(array_agg(words))) words
        , array_agg(part) parts
    from u0
    group by 1
  )
  select u.video_id, v.channel_id, u.words, u.parts
  from u
    join video_latest v on v.video_id=u.video_id
    join channel_latest c on c.channel_id =v.channel_id
  where v.platform='YouTube' --and v.updated<current_date()-7 and c.subs > 1000