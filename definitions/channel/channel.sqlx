config {
  type: "table",
  tags: ["standard"]
}
with c as (
    select v :ChannelId :: string      as channel_id,
           v :ChannelTitle :: string   as channel_title,
           v :MainChannelId :: string  as main_channel_id,
           v :Description :: string    as channel_decription,
           v :LogoUrl :: string        as logo_url,
           v :Relevance :: float       as relevance,
           v :LR :: string             as lr,
           v :Subs :: int              as subs,
           v :ChannelViews :: int      as channel_views,
           v :Country :: string        as country,
           v :HardTags :: array        as hard_tags,
           v :SoftTags :: array        as soft_tags,
           v :UserChannels :: array    as user_channels,
           v :Updated :: timestamp_ntz as updated,
           v :StatusMessage :: string  as status_msg
    from ${ref('channel_stage')}
),
     mc as (
         select channel_id, channel_title
         from c
     ),
     ch as (
         select c.*,
                coalesce(mc.channel_title, c.channel_title) as main_channel_title,
                row_number() over (
                    partition by c.channel_id
                    order by
                        updated desc
                    )                                       as age,
                array_cat(soft_tags, hard_tags)             as tags,
                case -- evaluated top to bottom. Start with most stand-out/defining tags
                    when array_contains('WhiteIdentitarian'::variant, tags) then 'Alt-right'
                    when array_contains('AntiWhiteness'::variant, tags) then 'Anti-white'
                    when array_contains('MRA'::variant, tags) then 'MRA'
                    --when main_channel_id in ('UCpwvZwUam-URkxB7g4USKpg') then 'Russian State'
                    when array_contains('Libertarian'::variant, tags) then 'Libertarian'
                    when array_contains('Conspiracy'::variant, tags) then 'Conspiracy'
                    when array_contains('AntiSJW'::variant, tags)
                        and arrays_overlap(array_construct('Provocateur', 'PartisanRight'), tags) then 'Alt-light'
                    when array_contains('AntiSJW'::variant, tags) and
                         not arrays_overlap(array_construct('PartisanRight', 'Provocateur'), tags) then 'Anti-SJW'
                    -- not enough to be interesting
                    --                     when array_contains('Socialist'::variant, tags) and array_contains('Revolutionary'::variant, tags)
                    --                         then 'Revolutionary Socialist'
                    when array_contains('Socialist'::variant, tags) then 'Socialist'
                    when array_contains('ReligiousConservative'::variant, tags) then 'Religious Conservative'
                    when array_contains('SocialJustice'::variant, tags) then 'Social Justice'
                    when array_contains('PartisanLeft'::variant, tags) then 'Partisan Left'
                    when array_contains('PartisanRight'::variant, tags) then 'Partisan Right'
                    when array_contains('AntiTheist'::variant, tags) then 'Anti-Theist'
                    else null
                    end as ideology,
                case
                    when arrays_overlap(array_construct('Mainstream News', 'TV'), tags) then 'Mainstream Media'
                    when array_contains('MissingLinkMedia'::variant, tags) then 'Missing Link Media'
                    else 'YouTube'
                    end  as media,
                case
                    when array_contains('ManoelControl'::variant, tags) then 'Control'
                    when array_contains('ManoelAltRight'::variant, tags) then 'Alt-right'
                    when array_contains('ManoelAltLight'::variant, tags) then 'Alt-light'
                    when array_contains('ManoelAltIDW'::variant, tags) then 'IDW'
                    else null
                    end  as manoel,
                iff(array_contains('AIN'::variant, tags), 'AIN', null) as ain
         from c
                  left join mc on c.main_channel_id = mc.channel_id
     )
select *
from ch
