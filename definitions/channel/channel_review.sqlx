config {
    type:'table',
    tags:["standard"],
    dependencies: ['channel_review_sam']
}


with sam_reviews as (
  select *
  from channel_review_sam
  where update_no=1
)
  -- union human and algo reviews
   , all_reviews as (
  select *
       , decode(lr, 'L', -1, 'C', 0, 'R', 1, null) as lrnum
       , iff(reviews_algo=0, lrnum, null) as lrnum_human
       , iff(reviews_algo=0, relevance, null) as relevance_human
  from (
         select *
              , 0 as reviews_algo
         from review
         union all
         select channel_id
              , 'sam_algo' email
              , lr
              , null main_channel_id
              , 'predicted by sams algo' notes
              , null public_reviewer_notes
              , null public_creator_notes
              , relevance
              , updated
              , tags
              , 1 reviews_algo
         from sam_reviews
       )
)

  -- find the first date a tag has been introduced. Used when working out majority tags (ignore reviews pre-tag)
   , tag_stats as (
  select tag, date_trunc(minutes, min(updated)) as min_updated
  from (
         select updated, t.value::string as tag
         from review
            , table (flatten(tags)) t
       )
  group by tag
)

  -- we frequently update reviews, use the latest
   , latest_review as (
  select *
       , count(*) over (partition by channel_id) as review_count
  from (
         select *
         from all_reviews
           qualify row_number() over (partition by email
             , channel_id order by updated desc)=1
       )
)

  -- humans should override algo reviews
   , latest_review_no_algo_conflicts as (
  select *
  from latest_review a
  where reviews_algo=0
     or not exists(select * from all_reviews r where r.reviews_algo=0 and a.channel_id=r.channel_id)
)

  -- we use notes from the last human review
   , latest_channel_review_notes as (
  select channel_id, public_reviewer_notes, public_creator_notes
  from all_reviews
  where reviews_algo=0
    qualify row_number() over (partition by channel_id order by updated desc)=1
)


  -- flatten, o there is a row for each tag
   , tags_flat as (
  select channel_id
       , f.tag
       , email
       , updated
       , ts.min_updated
       , reviews_algo
       , (select count(*) from latest_review_no_algo_conflicts r where r.channel_id=f.channel_id and r.updated>=ts.min_updated) as relevant_reviews
       , (select count(*)
          from latest_review_no_algo_conflicts r
          where r.channel_id=f.channel_id
            and r.updated>=ts.min_updated
            and r.reviews_algo=0) as relevant_reviews_human
  from (
         -- flatten to row per tag & filter out stale reviews
         select channel_id
              , t.value::string as tag
              , r.email
              , r.reviews_algo
              , updated
         from latest_review_no_algo_conflicts r
            , table (flatten(tags)) t
         where tag not in ('Provocateur','AntiWhiteness','Revolutionary') --legacy tags
       ) f
         left join tag_stats ts on f.tag=ts.tag
)

  -- for each channel, calculate the final list of tags with a majority vote
   , tags_agg_all as (
  select channel_id
       , array_agg(tag) within group ( order by tag ) as tags
  from (
         select channel_id
              , tag
         from tags_flat
         group by channel_id, tag
         having count(*)>any_value(relevant_reviews)/2
       )
  group by channel_id
)

  -- as with tags_agg_all, but only humans. used for training other algo's without them influencing eachother
   , tags_agg_human as (
  select channel_id
       , array_agg(tag) within group ( order by tag ) as tags
  from (
         select channel_id
              , tag
         from tags_flat
         where reviews_algo=0
         group by channel_id, tag
         having count(*)>any_value(relevant_reviews_human)/2
       )
  group by channel_id
)

   , raw_reviews_by_channel2 as (
  select channel_id
       , count(*) as reviews_all
       , sum(reviews_algo) as reviews_algo
       , count(*)-sum(reviews_algo) as reviews_human
       , array_agg(email) as reviewers
       , array_agg(object_construct(
      'email', email
    , 'lr', lr
    , 'main_channel_id', main_channel_id
    , 'notes', notes
    , 'relevance', relevance
    , 'tags', tags
    , 'updated', updated
    )) as reviews
  from latest_review r
  group by channel_id
)

  -- group non-conflicting reviews by channel for relevance/lr calcs, then join to raw to get full stats
   , r2 as (
  select r.*, u.reviews_all, u.reviews_algo, u.reviews_human, u.reviewers, u.reviews
  from (
         select channel_id
              , decode(round(avg(lrnum)), -1, 'L', 0, 'C', 1, 'R') as lr
              , decode(round(avg(lrnum_human)), -1, 'L', 0, 'C', 1, 'R') as lr_human
              , avg(relevance_human) as relevance_human
              , avg(relevance) as relevance
         from latest_review_no_algo_conflicts r
         group by channel_id
       ) r
         left join raw_reviews_by_channel2 u on u.channel_id=r.channel_id
)

  -- latest channel (don't use the channel table so it can depend on this table)
   , cl as (
  select v:ChannelId::string as channel_id
       , v:ChannelTitle::string as channel_title
  from channel_stage
    qualify row_number() over (partition by channel_id order by v:Updated::timestamp_ntz desc)=1
)

   , s as (
  select c.channel_title
       , coalesce(ta.tags, array_construct()) as tags
       , coalesce(th.tags, array_construct()) as tags_human
       , r2.*
       , n.public_creator_notes
       , n.public_reviewer_notes
       , r2.reviews_all>=1 and r2.lr is not null and r2.relevance>0.3 as meets_review_criteria
  from r2
         left join cl c on r2.channel_id=c.channel_id
         left join tags_agg_all ta on r2.channel_id=ta.channel_id
         left join tags_agg_human th on r2.channel_id=th.channel_id
         left join latest_channel_review_notes n on n.channel_id=r2.channel_id
)
select *
from s