config {
  type: "table",
  tags: ['standard', 'core'],
  uniqueKey:['channel_id'],
  dependencies:['channel', 'channel_review']
}
with cv as (
  select channel_id
       , sum(views) as channel_video_views
       , min(upload_date) as from_date
       , max(upload_date) as to_date
       , greatest(datediff(day
                    , from_date
                    , iff(to_date=from_date
                             , current_date()
                             , to_date)), 1) as day_range
       , sum(views)/day_range as channel_lifetime_daily_views
       , avg(datediff(minutes, '00:00:00'::time, duration::time)) as avg_minutes
  from video_latest
  group by channel_id
)
   , latest as (
  select *
  from channel
    qualify row_number() over (partition by channel_id order by updated desc)=1
)
   , latest_names as (
  select channel_id, channel_title
  from latest
)
   , dead_dates as (
  select *
  from (
         select channel_id, updated death_recorded
         from channel c
           qualify c.status_msg='Dead'
             and lag(c.status_msg) over (partition by channel_id order by updated)='Alive' -- it is dead, but was alive last update
       )
    qualify row_number() over (partition by channel_id order by death_recorded desc)=1 --latest death recorded
)
   , c2 as (
  select c.*
       , cv.channel_video_views
       , cv.from_date
       , cv.to_date
       , cv.day_range
       , cv.channel_lifetime_daily_views
       , cv.avg_minutes
       , channel_lifetime_daily_views*cr.relevance::number as channel_lifetime_daily_views_relevant
       , mc.channel_title as main_channel_title
       , cr.tags as tags
       , cr.lr
       , cr.relevance
       , cr.public_reviewer_notes
       , cr.public_creator_notes
       , coalesce(cr.reviews_all, 0) as reviews_all
       , coalesce(cr.reviews_algo, 0) as reviews_algo
       , reviews_all-reviews_algo as reviews_human
       , case -- evaluated top to bottom. Start with most stand-out/defining tags
           when array_contains('WhiteIdentitarian'::variant, tags) then 'White Identitarian'
           when array_contains('MRA'::variant, tags) then 'MRA'
           when array_contains('QAnon'::variant, tags) then 'QAnon'
           when array_contains('Conspiracy'::variant, tags) then 'Conspiracy'
           when array_contains('AntiSJW'::variant, tags) then 'Anti-SJW'
           when array_contains('Socialist'::variant, tags) then 'Socialist'
           when array_contains('Black'::variant, tags) then 'Black'
           when array_contains('LGBT'::variant, tags) then 'LGBT'
           when array_contains('ReligiousConservative'::variant, tags) then 'Religious Conservative'
           when array_contains('Libertarian'::variant, tags) then 'Libertarian'
           when arrays_overlap(array_construct('SocialJustice', 'AntiWhiteness'), tags) then 'Social Justice'
           when array_contains('PartisanLeft'::variant, tags) then 'Partisan Left'
           when array_contains('PartisanRight'::variant, tags) then 'Partisan Right'
           when cr.lr in ('C','L') and arrays_overlap(array_construct('Mainstream News', 'MissingLinkMedia'), tags) then 'Center/Left MSM'
           when array_contains('AntiTheist'::variant, tags) then 'Anti-theist'
           else 'Unclassified'
    end as ideology
       , case
           when arrays_overlap(array_construct('Mainstream News', 'TV', 'LateNightTalkShow'), tags) then 'Mainstream Media'
           when array_contains('MissingLinkMedia'::variant, tags) then 'Missing Link Media'
           else 'YouTube'
    end as media
       , subs>10000 or channel_views>(
                                       select median(channel_views/subs)
                                       from channel
                                       where subs>0
                                     )*10000 as meets_sub_criteria
       , cr.meets_review_criteria
       , iff(status_msg='Dead', d.death_recorded, null) death_recorded
       , case
           when lr='C' then 'C'
           when lr='R' then iff(arrays_overlap(array_construct('WhiteIdentitarian', 'QAnon'), tags)
                                  or (array_contains('Conspiracy'::variant, tags) and array_contains('PartisanRight'::variant, tags)), 'FR', 'R')
           when lr='L' then iff(arrays_overlap(array_construct('Socialist'), tags), 'FL', 'L')
    end homa_category_proposed
  from latest c
         left join latest_names mc
                   on c.main_channel_id=mc.channel_id
         left join cv on c.channel_id=cv.channel_id
         left join channel_review cr on c.channel_id=cr.channel_id
         left join dead_dates d on d.channel_id=c.channel_id
)
select *
from c2