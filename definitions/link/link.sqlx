config {
  type: "incremental",
  tags:['standard'],
  dependencies:['channel_latest', 'video_latest', 'yt_udf'],
  uniqueKey:['channel_id_from', 'video_id_from', 'post_id_from', 'url', 'platform_from'],
  description:`Url's from channel & video description, parler/reddit posts.
  TODO: we should look in comments too
  `
}

-- links from posts/videos

with descr as (
  select v.description, v.channel_id, v.video_id, v.updated
  from video_latest v
         left join channel_latest c on v.channel_id=c.channel_id
  union all
  select description, channel_id, null video_id, c.updated
  from channel_latest c
)
  , desc_links as (
  select d.channel_id channel_id_from
       , d.video_id video_id_from
       , lower(m.value:host::string) host
       , m.value:"url"::string url
       , c.platform platform_from
       , d.updated
  from descr as d
         left join channel_latest c on d.channel_id=c.channel_id
    , table (flatten(matchurls(d.description))) m
  where url is not null
  ${ when(incremental(), `and d.updated > coalesce((select max(updated) from link l where l.channel_id_from is not null), '0000-01-01'::timestamp_ntz)`) }
),

platform_inc as (
  select platform_from, max(updated) max_updated
  from link
  group by 1
),

  post_inc as (
  select p.* from post p
  ${ when(incremental(), `left join platform_inc u on p.platform = u.platform_from  where p.updated > coalesce(max_updated, '0000-01-01'::timestamp_ntz)`) }
)

, post_q as (
select post_id post_id_from
      , lower(m.value:host::string) host
      , m.value:"url"::string url
      , updated
      , platform platform_from
from post_inc p
  , table (flatten(matchurls(body))) m
)
  , u as (
  select channel_id_from, video_id_from, null post_id_from, host, url, platform_from, updated
  from desc_links
  union all
  select null, null, post_id_from, host, url, p.platform_from, updated
  from post_q p
)
select *
     , hosttoplatform(host) platform_to
     , sysdate() updated_wh -- easy incremental logic downstream
from u