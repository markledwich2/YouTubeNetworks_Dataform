config {
  type: "incremental",
  dependencies:['link', 'channel_latest', 'video_latest']
}

-- with platform specific link parsing, extract details about the video/channel links are for
with linkd as (
  select *
       , regexmatch(url,
                    decode(platform_to,
                           'Rumble','https?://(?:www\\.)?rumble\\.com/(?:(?<path>c|user|account|register|embed)/)?(?<id>[\\w-]*)/?$',
                           'BitChute',
                           'https?://(?:www\\.)?bitchute\\.com/(?:(?<path>channel|video|profile|search|hashtag|accounts/\\w|accounts)/)?(?<id>[\\w-]*)/?$')
    ,'i') p
       , p:id::string link_id
       , p:"path"::string path_raw
       , case
           when platform_to='Rumble' then (
             case
               when path_raw='c' then 'channel'
               when path_raw is null then iff(link_id regexp $$v\w{5}-.*$$,'video','channel')
               else path_raw
             end
             )
           when path_raw='channel' then 'channel'
           when path_raw is null then 'channel'
           else path_raw
         end link_type
  from link l
  where link_type in ('channel','video') and link_id is not null
)
select l.url
     , l.link_type
     , l.link_id
     , l.channel_id_from
     , l.video_id_from
     , l.post_id_from
     , iff(link_type='channel',tc.channel_id,null) channel_id_to
     , iff(link_type='video',tv.video_id,null) video_id_to
     , case link_type
         when 'channel' then channel_id_to is not null
         when 'video' then video_id_to is not null
       end link_found
     , l.platform_from
     , l.platform_to
from linkd l
       left join channel_latest tc on (link_id=tc.source_id or link_id=tc.discover_source:DestId) and tc.platform=l.platform_to
       left join video_latest tv on tv.source_id=link_id and tv.platform=l.platform_to
${ when(incremental(), `where updated > (SELECT MAX(updated) FROM ${self()})`) }