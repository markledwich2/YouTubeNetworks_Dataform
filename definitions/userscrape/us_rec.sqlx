config {
  type: "incremental",
  tags:["standard", "us"],
  dependencies:[ "channel_latest", "video_latest" ]
}

with r1 as (
  select v:account::string as account
       , v:channel::string as from_channel_title
       , v:channel_id::string as from_channel_id
       , v:video_id::string as from_video_id
       , v:title::string as from_video_title
       , v:unavailable::string as unavailable
       , v:updated::timestamp_ntz as updated
       , r.value:title::string as to_video_title
       , r.value:videoId::string as to_video_id
       , r.value:personalized::boolean as personalized
       , r.value:rank::string as rank
       , r.value:channelTitle::string as to_channel_title
       , r.value:channelId::string as to_channel_id
  from us_rec_stage
     , lateral flatten(input => v:recommendations) r
  where updated>'2020-09-05'
   ${ when(incremental(), `and updated > (select max(updated) from ${self()})`) }
)
   , channel_by_title as (
     select channel_title, channel_id
     from channel_latest
     qualify row_number() over (partition by channel_title order by greatest(channel_views, channel_video_views) desc) = 1
)
   , r2 as (
  select
         decode(r1.account, 'Mainstream News', 'MainstreamNews', r1.account) account
       , from_channel_title
       , from_channel_id
       , from_video_id
       , from_video_title
       , unavailable
       , r1.updated
       , to_video_title
       , to_video_id
       , personalized
       , rank
       , to_channel_title
       , coalesce(to_channel_id, tv.channel_id, tc.channel_id) as to_channel_id
  from r1
         left join channel_by_title tc on tc.channel_title=r1.to_channel_title
         left join video_latest tv on tv.video_id = r1.to_video_id
)
select *
from r2