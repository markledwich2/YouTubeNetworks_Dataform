config {
  type: "table",
  tags:['standard'],
  dependencies:['video_stats_daily', 'channel_accepted']
}

with vd_filtered as (
  select d.*
       --, sum(iff(date between anchor and dateadd(day,  -2, anchor), views, 0)) d2
  from video_stats_daily d
  join channel_accepted ca on d.channel_id = ca.channel_id
  where date>='2019-01-01'
    and not exists(select * from video_excluded v where v.video_id=d.video_id)
    and ca.platform = 'YouTube'
  --where channel_id in ('UCzQUP1qoWDoEbmsQxvdjxgQ','UCupvZG-5ko_eiXAupbDfxWw')
)
   , relative_ranges as (
  select video_id
       , channel_id
       , dateadd(day, coalesce(f.value: offset::int, 0), (select max(date) from vd_filtered)) period_value
       , 'd'||f.value:range::int period_type
       , sum(views) views
       , sum(watch_hours) watch_hours
  from vd_filtered
     , lateral flatten(array_construct(
      --object_construct('range', 1) -- this latest day is always incomplete. don't confuse people with partial results.by comparing days
    object_construct('range', 1, 'offset', -1)
    , object_construct('range', 1, 'offset', -2)
    , object_construct('range', 1, 'offset', -3)
    , object_construct('range', 1, 'offset', -4)
    , object_construct('range', 1, 'offset', -5)
    , object_construct('range', 1, 'offset', -6)
    , object_construct('range', 1, 'offset', -7)
    , object_construct('range', 7, 'offset', -1)
    , object_construct('range', 30, 'offset', -1)
    , object_construct('range', 365, 'offset', -1)
    )) f
  where date between dateadd(day, 1-coalesce(f.value: range::int, 0), period_value) and period_value
  group by 1, 2, 3, 4
)
   , month_ranges as (
  select video_id
       , channel_id
       , date_trunc(month, date)::date
       , 'm'
       , sum(views)
       , sum(watch_hours)
  from vd_filtered
  where date_trunc(month, date)>=date_trunc(month, dateadd(year, -1, (select max(date) from vd_filtered))) -- 1y back (full month)
  group by 1, 2, 3, 4
)
   , year_ranges as (
  select video_id
       , channel_id
       , date_trunc(year, date)::date as period_value
       , 'y'
       , sum(views) views
       , sum(watch_hours) watch_hours
  from vd_filtered
  group by 1, 2, 3, 4
)
   , d2 as (
  select *
  from relative_ranges
  union all
  select *
  from month_ranges
  union all
  select *
  from year_ranges
)
select *
from d2
