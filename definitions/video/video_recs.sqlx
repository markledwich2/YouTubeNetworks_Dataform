config { 
        type:"table", 
        tags: ["standard"],
        dependencies: ['rec', 'channel_latest', 'video_latest' ]
}

with vr as (
        select rec.from_video_id,
                min(rec.from_video_title) as from_video_title,
                fc.channel_id  as from_channel_id,
                fc.channel_title  as from_channel_title,
                fc.main_channel_title as from_main_channel_title,
                rec.to_video_id,
                rec.to_video_title,
                coalesce(tc_title.channel_id, tc_vid.channel_id)  as to_channel_id,
                coalesce(tc_title.channel_title, tc_vid.channel_title) as to_channel_title,
                coalesce(tc_title.main_channel_title, tc_vid.main_channel_title) as to_main_channel_title,

                min(fc.media) as from_media,
                min(fc.ideology) as from_ideology,

                coalesce(min(tc_title.media), min(tc_vid.media)) as to_media,
                coalesce(min(tc_title.ideology), min(tc_vid.ideology)) as to_ideology,

                min(fv.views)  as from_views,

                -- recs between the two videos
                count(1) as recs,

                -- recs for this video
                sum(recs) over (partition by rec.from_video_id) as from_video_recs,

                -- views * by the portion recs to the video compared to the total number of recs
                from_views * (recs/nullif(from_video_recs, 0)) as rec_view_portion,


                -- estimate for the times a rec is seen. Assume 10 is the average number of recs visible form a video. so the impressions is 10*the portion of recs
                rec_view_portion * 10 as impressions,

                impressions * avg(fc.relevance) as relevant_impressions,

                -- a way to compare youtube influence vs a fair-but-dumb algo proportional to views
                impressions / nullif(min(tv.views), 0) as impressions_per_to_view

        from rec
                left join channel_latest fc on rec.from_channel_id = fc.channel_id
                left join video_latest fv on rec.from_video_id = fv.video_id
                left join video_latest tv on rec.to_video_id = tv.video_id
                left join channel_latest tc_title on rec.to_channel_title = tc_title.channel_title
                left join channel_latest tc_vid on tv.channel_id = tc_vid.channel_id

        group by
                rec.from_video_id, rec.from_video_title,
                fc.channel_id, fc.channel_title, fc.main_channel_title,
                rec.to_video_id, rec.to_video_title,
                tc_vid.channel_title, tc_vid.channel_id, tc_vid.main_channel_title,
                tc_title.channel_id, tc_title.channel_title, tc_title.main_channel_title
)
select vr.*,
        -- rec_view_portion % of the total for the from channel
        vr.rec_view_portion / nullif(sum(vr.rec_view_portion) over (partition by vr.from_channel_id), 0) as rec_view_channel_percent,
        coalesce(vr_to.relevant_impressions, 0) - coalesce(vr.relevant_impressions, 0) as net_impressions
from vr
--  join to the opposite direction to get the net impressions
left join vr as vr_to on vr_to.from_video_id = vr.to_video_id and vr_to.to_video_id = vr.from_video_id
