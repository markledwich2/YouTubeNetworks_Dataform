config {
    type: 'incremental',
    tags: ['standard'],
    uniqueKey: ['video_id'],
    dependencies: []
}


with video_extra_view as (
  select
       -- standard video fields
       -- initially video extra was missing standard fields. Fall back to the video-latest if we have it
    coalesce(v:Id,v:id,v:VideoId)::string video_id
       , v:Title::string video_title
       , v:ChannelId::string channel_id
       , v:ChannelTitle::string channel_title
       , v:Platform::string platform
       , nullif(v:UploadDate::timestamp_ntz,'0001-01-01') upload_date
       -- don't get ViewCount because more recent exists in video table
       , nullif(v:Statistics:LikeCount::int,0) likes
       , nullif(v:Statistics:DislikeCount::int,0) dislikes
       , v:Description::string description
       , try_to_time(v:Duration::string) duration
       , v:Keywords::array keywords
       , v:CommentCount::int comment_count
       , v:Updated::timestamp_ntz updated
       , v:Source::string source
       , coalesce(v:Error,v:error)::string error
       , coalesce(v:SubError,v:subError)::string sub_error

       --these error classifications are out of date
       , case
           when error is null then null
           when error in('Restricted','Sign in to confirm your age') then 'Restricted'
           when error='Private video' or (error='Content Warning' and sub_error like 'If the owner of this video has granted you access%') then 'Private'
           when error='The uploader has not made this video available in your country.' then 'Not available in USA'

           when sub_error like 'This video has been removed for violating YouTube''s Community Guidelines.' then 'Community guidelines'
           when sub_error='This video has been removed by the uploader' or error='This video has been removed by the uploader' then 'Removed by uploader'
           when sub_error='This full-length episode is available for purchase.' then 'Paywall'
           when sub_error like '%copyright%' then 'Copyright claim'

    -- old messages
           when error like 'This video is no longer available due to a copyright claim%' then 'Copyright claim'
           when error like 'This video has been removed for violating YouTube''s policy on harassment and bullying.' then 'Harassment and bullying'
           when error like 'This video has been removed for violating YouTube''s Community Guidelines.' then 'Community guidelines'
           when error like 'This video has been removed for violating YouTube''s Terms of Service.' then 'Terms of service'
           when error like 'This video has been removed for violating YouTube''s policy on hate speech%' then 'Hate speech'
           when error like 'This live stream recording is not available.' then 'Unavailable'
           when error like 'This video is no longer available due to a privacy claim by a third party.' then 'Privacy claim'
           when error like 'This video is unavailable on this device.' then 'Device'
           when error like 'This video has been removed for violating YouTube''s policy on nudity or sexual content.' then 'Sexual content'
           when error like 'This video is no longer available because the YouTube account associated with this video has been terminated.'
             then 'Channel terminated'

           when error in ('Video unavailable','This video is unavailable.') then 'Unavailable'
           else 'Unknown'
         end error_type
       --This video contains content from WMG, who has blocked it in your country on copyright grounds.
       , iff(error_type='Copyright claim',coalesce(
      regexp_substr(sub_error,'content from (.+?),',1,1,'e'),
      regexp_substr(sub_error,'copyright claim by (.+?).',1,1,'e')),null) copyright_holder
  from video_extra_stage s
  --where channel_id='UCzQUP1qoWDoEbmsQxvdjxgQ'
)
  , s as (
  select video_id
       , video_title video_title_raw
       , channel_id
       , channel_title
       , platform
       , updated
       , source
       , error
       , sub_error
       , error_type
       , copyright_holder
      , ${channel.lastNotNull(['video_title', 'upload_date', 'likes', 'dislikes', 'description', 'duration', 'comment_count', 'keywords' ], 'video_id')}
  from video_extra_view e
  ${ when(incremental(), `where updated > (SELECT MAX(updated) FROM ${self()})`) }
    qualify row_number() over (partition by video_id order by updated desc)=1 -- some videos have many rows missing an updated value - avoid dupes
)
select *
from s