config {
  type: "incremental",
  tags: ['standard', 'views'],
  dependencies: ['video', 'channel_accepted_process', 'video_latest'],
  uniqueKey:['video_id', 'updated']
}

with
  -- do this first so that the slower window query that needs the full time-set happens post filter
  vids_to_update as (
    select distinct video_id
    from video v
    where (updated>(select max(updated) from video_views_raw)
      or not exists(select * from video_views_raw r where r.video_id=v.video_id))
  )

  , s1 as (
  select v.channel_id
       , v.video_id
       , v.views-coalesce(lag(v.views) over (partition by v.video_id order by v.updated),0) delta_views
       , v.views total_views
       -- from date is the previous updated date, of if that is missing the upload_date
       -- sometimes the upload date is more recent than uploads (e.g. live stream scheduled in advance 21HQL59EsQY)
       , lag(v.updated) over (partition by v.video_id order by v.updated) prev_date
       , min(upload_date) over (partition by v.video_id order by vl.updated) first_upload_date
       , v.updated
  from video v
         ${ when(incremental(), `join vids_to_update u on v.video_id=u.video_id`)} 
         join video_latest vl on v.video_id=vl.video_id
  where exists(select * from channel_accepted_process c where v.channel_id=c.channel_id)
  -- and v.channel_id='BitChute|nLPcg68RnP97'
)
  , s1_incremental as (
  select *
  from s1
  where updated>(select max(updated) from video_views_raw)
    or not exists(select * from video_views_raw r where r.video_id=s1.video_id)
)
select *
from s1${ when(incremental(), `_incremental`) } -- switch depending on incrmental

post_operations {
  alter table ${self()} cluster by (channel_id, video_id)
}