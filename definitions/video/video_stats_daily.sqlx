config {
    type:'incremental',
    uniqueKey: ['video_id', 'date'],
    tags: ['standard'],
    dependencies: ['video', 'channel_accepted_process', 'video_latest', 'date', 'video_watch_time', 'video_views_raw']
}

-- video_stats_daily spreads video views from our patchy as-at-time records into an estimate for views on each day
with delta as (
  select *
       , updated::date as to_date
       , coalesce(prev_date, least(first_upload_date, updated), first_upload_date, updated)::date as from_date
       , greatest(1.0, datediff(days, from_date, to_date))::int as days --be careful. needs to match the v1 left join. e.g. if days rows match with delta, this should also be 2
  from video_views_raw v
  where exists(select channel_id from channel_accepted_process c where v.channel_id=c.channel_id)
  --and to_date > '2019-01-01'
   -- and video_id = 'eMaKxR2Blr4' -- alice down the rabbit hole
        --'Z4SXxxUnq0U' -- fox news form aug
--      'AZZNvT1vaJg' -- JRE #1191
-- --    , '5n_3mnJfHzY' -- alex jones. Decay logic clumps view to november full refresh
--     )
--    and channel_id in ('UCzQUP1qoWDoEbmsQxvdjxgQ' --JRE
--    ,'UCXIJgqnII2ZOINSWNOGFThA' -- fox
--    ,'UCupvZG-5ko_eiXAupbDfxWw' --cnn
--    ,'UC3XTzVzaHQEd30rQbuvCtTQ' --last week tonight
--    ,'UCnQC_G5Xsjhp9fEJKuIcrSw' --ben shapiro
--    ,'UCn4sPeUomNGIr26bElVdDYg' --now this
--    ,'UCB1o7_gbFp2PLsamWxFenBg' --x22
--    ,'UCk0rJN52_9-cLGW-TeZwDGw' --redpill
--    ,'UCldfgbzNILYZA4dmDt4Cd6A' -- secular talk
--    ,'UCEh7V-I77Cs9st5gtH4wd7w' --roma army
--    , 'UCSYCo8uRGF39qDCxF870K5Q' --owen jones
--    )
  ${ when(incremental(), `and updated > (select max(updated) from ${self()})`) } -- standard incremental. video smears work even with only the most recent record
  -- the views spread takes into account previous records of videos. So we should always consider the full set of videos that have been updated
)
   , days as (
  select date
  from date
  where date between
    greatest('2019-01-01'::date, (select min(from_date) from delta)) -- limit our range back to 2019, but optimise the range for incremental loads
    and (select max(to_date) from delta) -- this can be a big range. The join to delta will filter outside the range
)

   -- cartesian join dates and delta to change from a to/form record to one per day
   , vd0 as (
  select date, d.*
  from days -- query days and join to delta to spread across days sans updates
         inner join delta d on d.from_date=date or (d.from_date<date and date<d.to_date)
)
  -- ensure  record per day, and distribute views more realistically between updates
   , vd1 as (
  select date
       , video_id
       , any_value(channel_id) channel_id
       , sum(delta_views) delta_views
       , max(total_views) total_views
       , max(updated) updated
       , min(from_date) from_date
       , max(days) days
       , min(first_upload_date) first_upload_date
       , sum(1) stats_recorded
  from vd0
  group by date, video_id -- possible to get multiple records for the same date because there are multiple overlapping ranges. group here so its clean downstream
)

   , vd2 as (
  select video_id
       , date
       , channel_id

    /*
views1: When our range is > 1 day and we should give a realistic distribution of views
to do this I took the average views for 2019 over age and created a formula using wolfram notebook
https://www.wolframcloud.com/obj/6f22519c-cb44-41bc-85e1-3f5e531b4e05
because the formula is an approximation we need to adjust as a second step to make it add up perfectly
*/
       , datediff(days, from_date::date, date)::int range_age -- range age is the days old since from_date.
       , iff(first_upload_date::date=from_date, 'decay', 'avg') mode
       , round(delta_views*iff(days>1, iff(range_age<120 and range_age>=0, 1.0/(pow(1.8+range_age, 1.77)), null),
                               1)) views_decay -- up to 120 days of realistic decaying views
       , delta_views/days views_avg
       , iff(mode = 'decay', views_decay, views_avg) views_estimate -- use decay when estimating from first date, avg otherwise
       , total_views
       , updated
       , days
       , delta_views
  from vd1
  where range_age=0 or abs(views_estimate)>=100 -- only include records at the start of the range, or if there are at least 100 views. tru-up logic will place these crums in the from_date record
)
  -- the final result, re-select columns to remove any intermediate calculations
  -- true-up any missing views to the first in the range. partition by updated to decay this particular this delta row
   , s as (
  select vd2.video_id
       , vd2.channel_id
       , total_views
       , date
       , views_decay
       , delta_views
       , range_age
       , vd2.updated
       , views_estimate
       , mode
       -- true-up on the first row with the difference from the total
       , iff(days>1 and range_age=0,
             coalesce(views_estimate, 0)+delta_views-(sum(coalesce(views_estimate, 0)) over (partition by vd2.video_id, vd2.updated))
    , views_estimate) as views
  from vd2
)
  -- check if there are any videos where the total views don't match the sum of all daily views
   , check_video_totals as (
  select *
  from (
         select video_id
              , sum(views) over (partition by video_id) as views_sum
              , last_value(total_views) over (partition by video_id order by date) as last_total_view
              , row_number() over (partition by video_id order by date desc) as age
         from s
           qualify age=1
       )
  where last_total_view>0
    and views_sum<>last_total_view
)
  -- useful to tracking down where totals get out of sync
   , check_running_total as (
  select video_id
       , date
       , views
       , total_views
       , views_decay
       , views_estimate
       , range_age
       , updated
       , mode
       , sum(views) over (partition by video_id order by date rows between unbounded preceding and current row) as running_total

  from s
  order by video_id, date
)

   , channel_duration as (
  select channel_id, avg(datediff(seconds, '0'::time, duration)) duration_seconds_avg
  from video_latest
  where duration is not null
  group by channel_id
)

   , s2 as (
  select s.video_id
       , s.channel_id
       , date
       , s.views
       , s.updated
       , s.views*iff(v.duration is null, d.duration_seconds_avg, datediff(seconds, '0'::time, v.duration))/60/60*w.pct_watch as watch_hours
  from s
         left join video_latest v on v.video_id=s.video_id
         left join video_watch_time w on datediff(seconds, '0'::time, duration) between w.from_s and w.to_s
         left join channel_duration d on d.channel_id=s.channel_id
  where s.views > 0
)
select *
from s2

post_operations {
  alter table ${self()} cluster by (date, channel_id)
}
