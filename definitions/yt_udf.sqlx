config {
  tags: ['standard']
}

CREATE OR REPLACE FUNCTION public.timeSpanToSeconds(ts string) RETURNS double LANGUAGE JAVASCRIPT AS
'
if(!TS) return undefined
var parts = TS.split(":") // split it at the colons
var dayParts = parts[0].split(".")
var daySecs = dayParts.length > 1 ?
+dayParts[0] * 24 * 60 * 60 + dayParts[1] * 60 * 60 :
dayParts[0] * 60 * 60
var minSecs = +parts[1] * 60
var secSecs = +parts[2] // ss.ms just works because it is decimal

// minutes are worth 60 seconds. Hours are worth 60 minutes.
return daySecs + minSecs + secSecs
'
---

CREATE
OR REPLACE FUNCTION public.arrayUniq(items array) RETURNS array LANGUAGE JAVASCRIPT AS
'
return ITEMS ? [...new Set(ITEMS)] : undefined
'
---
create
or replace function public.arrayGroup(items array) returns object language javascript as
'
return ITEMS ? (ITEMS || []).reduce((r,a) => {
  r[a] = r[a] || 0
  r[a]++
  return r
}, {}) : undefined

'
---

CREATE
OR REPLACE FUNCTION public.arrayExclude(items array, exclude array) RETURNS array LANGUAGE JAVASCRIPT AS
'
return ITEMS ? ITEMS.filter(v => !EXCLUDE.includes(v)) : undefined
'

---

CREATE
OR REPLACE FUNCTION public.arrayLower(items array) RETURNS array LANGUAGE JAVASCRIPT AS
'
return ITEMS ? ITEMS.map(v => v && v.toLowerCase()) : undefined
'

---
CREATE
OR REPLACE FUNCTION public.arrayReplace(items array, pattern string, flags string, replacement string) RETURNS array LANGUAGE JAVASCRIPT AS
$$
function arrayReplace(arr, pattern, flags, replacement) {
  if(!arr) return undefined
  let re = new RegExp(pattern, flags ? flags + "g" : "g")
 	return arr.map(a => a.replace(re, replacement))
}
return arrayReplace(ITEMS, PATTERN, FLAGS, REPLACEMENT)
$$

---

CREATE
OR REPLACE FUNCTION public.arrayJoin(
  items array,
  param object,
  separator string,
  template string
) RETURNS string LANGUAGE JAVASCRIPT AS 
$$
function arrayJoin(items, param, separator, template) { 
  return items && items
    .map(i => template.replace(/{(\w+)}/gi, (_, p2) => Object.assign({}, param, i)[p2] || ''))
    .join(separator) 
}

return arrayJoin(ITEMS, PARAM, SEPARATOR, TEMPLATE)
$$
---

create
or replace function public.regexMatchAll(input string, pattern string, flags string) returns array language javascript as
'
function regexMatchAll(input, pattern, flags) {
  flags = flags ? flags + "g" : "g"
  let re = new RegExp(pattern, flags)
  let res = []
  let m;
  while (m = re.exec(input)) {
    let v = m[0] || "" 
    if(flags.includes("i"))
      v = v.toLowerCase()
    if(m.groups)
  		res.push(Object.assign({match: v}, m.groups))
    else
      res.push(v)
  }
  return res
}

return regexMatchAll(INPUT, PATTERN, FLAGS)
'

---

create
or replace function public.matchUrls(input string) returns array as
$$
regexmatchall(input, '(?<url>https?://(?:[\\w]*@[\\w]*:)?(?<host>[\\w\\-\\.]+)(?:/[\\w\\-/]+)?\\??[^\\s\\]\\[\\(\\)\\*]*)','im')
$$

---

create
or replace function public.regexMatch(input string, pattern string, flags string) returns object 
language javascript as
'function regexMatch(input, pattern, flags) {
  var res = new RegExp(pattern, flags).exec(input)
  return res ? res.groups : {};
}
return regexMatch(INPUT, PATTERN, FLAGS)
'

---

create
or replace function public.hostToPlatform(host string) 
returns string as 
$$ 
case
  when host like '%bitchute.com' then 'BitChute'
  when host like '%rumble.com' then 'Rumble'
  when host like any ('%youtube.com', '%youtu.be') then 'YouTube'
  when host like '%parler.com' then 'Parler'
end 
$$

---

create or replace function public.fromUnixTs(ts int) 
  returns timestamp_ntz as 
  $$ dateadd('s', ts, '1970-01-01') $$


---
create or replace function public.covidWords(input string)
returns array as
$$
select regexmatchall(input, '\\b(covid|coronavirus|SARS-CoV-2|vaccine|Wuhan flu|China virus|vaccinated|Pfizer|Moderna|BioNTech|AstraZeneca|Johnson \& Johnson|CDC|world health organization|Herd immunity|corona virus|kovid|covet|coven)\\b', 'i')
$$

---
create or replace function public.hasCovidWords(input string)
returns boolean as
$$
select array_size(covidWords(input)) > 0 
$$

---
create  or replace function public.arrayflatten(items array) returns array
  language javascript as
'return ITEMS && ITEMS.length > 0 ? ITEMS.reduce(function(a, b){ return a.concat(b); }) : undefined'

---
create or replace function public.mergeObject(a object, b object) returns object language javascript as
'return Object.assign({}, A, B)'

